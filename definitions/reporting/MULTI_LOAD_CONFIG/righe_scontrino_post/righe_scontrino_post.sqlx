config {
    type: "table",
    schema: "injenia",
    name: "RIGA_SCONTRINO_{int}0101"
}

WITH BACKUP_PRODOTTI AS (
	SELECT DISTINCT
		IF(barcode_negozio IS NOT NULL AND barcode_negozio != '', barcode_negozio, NULL) AS barcode_negozio,
		IF(modello_retail IS NOT NULL AND modello_retail != '', modello_retail, NULL) AS modello_retail,
		IF(ean IS NOT NULL AND ean != '', ean, NULL) AS ean,
		IF(societa IS NOT NULL AND societa !='', societa, NULL) AS societa,
		IF(anno IS NOT NULL AND anno > 0, anno, NULL) AS anno,
		IF(stagione IS NOT NULL AND stagione != 0, stagione, NULL) AS stagione,
		IF(uscita_collezione IS NOT NULL AND uscita_collezione !='', uscita_collezione, NULL) AS  uscita_collezione,
		IF(modello IS NOT NULL AND modello !='', modello, NULL) AS modello,
		IF(variante IS NOT NULL AND variante !='', variante, NULL) AS variante,
		IF(stagionale IS NOT NULL AND stagionale !='', stagionale, NULL) AS stagionale,
		IF(tipo_taglia IS NOT NULL AND tipo_taglia !='', tipo_taglia, NULL) AS tipo_taglia,
		IF(consegna IS NOT NULL AND consegna !='', consegna, NULL) AS consegna,
		IF(classe IS NOT NULL AND classe !='', classe, NULL) as classe,
		IF(tema IS NOT NULL AND tema !='', tema, NULL) as tema,
		indice_taglia
	FROM ${ref("D_PRODOTTO")}
),
CLIENTELE AS (
	SELECT * EXCEPT(rk)
	FROM (
		SELECT DISTINCT
			societa,
			anno,
			stagione,
			cliente,
			uscita_collezione,
			listino_acquisto,
			listino_vendita,
			f_tipo_ordine_riferimento,
			tipo_ordine_cliente,
			mercato_statistica,
			mercato_vendita,
			ROW_NUMBER() OVER(PARTITION BY societa, anno, stagione, cliente, uscita_collezione ORDER BY f_tipo_ordine_riferimento IS NOT NULL DESC, f_tipo_ordine_riferimento = '1' DESC, tipo_ordine_cliente = 'CV' DESC, listino_vendita IS NOT NULL DESC, listino_acquisto IS NOT NULL DESC) rk
		FROM ${ref("D_CLIENTELA")}
		WHERE validita IN ('V', '')
	)
	where rk = 1
),
CLIENTELE_IT AS (
	SELECT * EXCEPT(rk_italia)
	FROM (
		SELECT
			*,
			ROW_NUMBER() OVER(PARTITION BY societa, anno, stagione, uscita_collezione ORDER BY listino_vendita IS NOT NULL DESC, listino_acquisto IS NOT NULL DESC, f_tipo_ordine_riferimento = '1' DESC, tipo_ordine_cliente = 'CV' DESC) AS rk_italia
		FROM CLIENTELE
		JOIN (
			SELECT DISTINCT
				societa, anno, stagione,		
				CASE
				WHEN SAFE_CAST(cliente AS INT64) BETWEEN 1 AND 599 THEN CONCAT('0015160000', SUBSTR(cliente, -3))
				WHEN cliente = '10007035' THEN '15110007035'
				WHEN SAFE_CAST(cliente AS INT64) BETWEEN 10010776 AND 10010781 THEN CONCAT('00152100', SUBSTR(cliente, -5))
				WHEN SAFE_CAST(cliente AS INT64) BETWEEN 10010828 AND 10010829 THEN CONCAT('00152100', SUBSTR(cliente, -5))
				WHEN cliente = '10010823' THEN CONCAT('00152100', SUBSTR(cliente, -5))
				WHEN cliente = '10010835' THEN CONCAT('00153100', SUBSTR(cliente, -5))
				ELSE cliente
				END
				AS cliente
			FROM ${ref("D_CLIENTE_STAGIONE")}
			WHERE punto_vendita_retail IN (
				'0100019',  # MM
				'0100517',  # DT
				'0100851',  # PE
				'0100607',  # MR
				'0000707',  # PB (MN)
				'0000083',  # MC (MN)
				'0100404'  # MA
			)
		) USING (anno, stagione, societa, cliente)
	)
	WHERE rk_italia = 1
),
D_PREZZO_EXT AS (
	SELECT DISTINCT
		negozio,
		tipo_negozio_retail,
		modello,
		societa,
		divisa,
		nazione_negozio,
		annostagione,
		prezzo,
		controvalore
	FROM ${ref("D_PREZZO_EXT")}
	WHERE tipo_prezzo = 'V'
),
D_PREZZO_EXT_PREZZI_NEGOZI AS (
	SELECT DISTINCT D.*
	FROM D_PREZZO_EXT D
	WHERE negozio IS NOT NULL
),
D_PREZZO_EXT_PREZZI_NAZIONI AS (
	SELECT DISTINCT * EXCEPT (negozio)
	FROM D_PREZZO_EXT
	WHERE negozio IS NULL
),
# prezzi di acquisto per negozio
D_PREZZO_EXT_A AS (
	SELECT DISTINCT
		negozio AS negozio_retail,
		modello,
		societa,
		annostagione,
		prezzo,
		controvalore
	FROM ${ref("D_PREZZO_EXT")}
	WHERE negozio IS NOT NULL
	AND tipo_prezzo = 'A'
	QUALIFY ROW_NUMBER() OVER(
		PARTITION BY societa, annostagione, negozio, modello
		ORDER BY ts_inserimento DESC
	) = 1
),
# prezzi di acquisto per nazione
D_PREZZO_EXT_A_NAZIONE AS (
	SELECT DISTINCT
		modello,
		societa,
		nazione_negozio,
		tipo_negozio_retail,
		annostagione,
		prezzo,
		controvalore
	FROM ${ref("D_PREZZO_EXT")}
	WHERE negozio IS NULL
	AND tipo_prezzo = 'A'
	QUALIFY ROW_NUMBER() OVER(
		PARTITION BY societa, annostagione, nazione_negozio, modello, tipo_negozio_retail
		ORDER BY ts_inserimento DESC
	) = 1
),
PREZZI AS (
	SELECT 
		PR.anno,
		PR.stagione,
		PR.societa,
		PR.listino,
		PR.modello,
		PR.prezzo,
		PR.progr_periodo,
		PR.tipo_prezzo,
		PR.controvalore,
		PR.divisa
	FROM (
		SELECT *
		FROM ${ref("D_PREZZO")}
		WHERE tipo_prezzo IN ('A', 'V')
		QUALIFY ROW_NUMBER() OVER(PARTITION BY societa, modello, listino, anno, stagione, tipo_prezzo, progr_periodo ORDER BY ts_inserimento DESC, prezzo IS NULL) = 1
	) PR
),
TIPI_PREZZO_CLIENTE AS (
	SELECT 
		PC.anno,
		PC.stagione,
		PC.societa,
		PC.cliente,
		PC.tipo_prezzo,
		PC.progr_periodo,
		PC.data_inizio,
		PC.data_fine,
		IF(PC.data_inizio=PC.temp_data_fine_calcolata, CURRENT_DATE(), temp_data_fine_calcolata) AS data_fine_calcolata
	FROM (
		SELECT *, FIRST_VALUE(data_inizio) OVER(PARTITION BY societa, anno, stagione, cliente, tipo_prezzo ORDER BY progr_periodo DESC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS temp_data_fine_calcolata
		FROM (
			SELECT *
			FROM ${ref("D_TIPO_PREZZO_CLIENTE")} 
			WHERE tipo_prezzo IN ('A', 'V')
			QUALIFY ROW_NUMBER() OVER(PARTITION BY societa, anno, stagione, cliente, tipo_prezzo, data_inizio ORDER BY ts_inserimento DESC) = 1
		)
	) PC
),
PREZZI_VALIDI AS (
	SELECT 
		societa,
		anno,
		stagione,
		listino,
		modello,
		prezzo,
		controvalore,
		divisa,
		tipo_prezzo,
		NULL AS progr_periodo,
		NULL AS cliente,
		NULL AS data_inizio,
		NULL AS data_fine,
		NULL AS data_fine_calcolata
	FROM PREZZI 
	WHERE societa != 'DT'
	UNION DISTINCT
	SELECT 
		societa,
		anno,
		stagione,
		listino,
		modello,
		prezzo,
		controvalore,
		divisa,
		tipo_prezzo,
		progr_periodo,
		cliente,
		data_inizio,
		data_fine,
		data_fine_calcolata
	FROM PREZZI 
	LEFT JOIN TIPI_PREZZO_CLIENTE USING (societa,anno,stagione,tipo_prezzo,progr_periodo)
	WHERE societa = 'DT'
)
# STEP 4: MAIN SELECT
SELECT * EXCEPT(prezzo_pieno),
	CASE # DMA-3787
		WHEN tipo_negozio_retail LIKE '%EC' OR input_filename NOT LIKE '%xml' THEN IF(prezzo_listino_sell_out_nazionale > ABS(fatturato), 'Scontato', 'Prezzo Pieno') 
		ELSE prezzo_pieno
	END AS prezzo_pieno
FROM (
	SELECT DISTINCT
		righe_scontrino.* EXCEPT(
			anno_old,
			modello_old,
			stagionale_old,
			stagione_old,
			uscita_collezione_old,
			variante_old,
			consegna_old,
			classe_old,
			tema_old,
			modello_retail_old,
			ean_old,
			prezzo_listino_sell_out_nazionale_old,
			prezzo_listino_sell_out_nazionale_controvalore_old,
			fatturato,
			fatturato_netto,
			controvalore_euro,
			controvalore_netto_euro,
			ts_modifica,
			_rank_decennium_bug,
			_prezzo_dbg,
			_controvalore_dbg,
			_prezzo_ext_negozi,
			_controvalore_ext_negozi,
			_prezzo_ext_nazioni,
			_controvalore_ext_nazioni
		),
						
		# fallback quando fatturato e' uguale a zero, in righe_scontrino viene fatto in pipeline
		IF(
			righe_scontrino.fatturato = 0 AND NOT righe_scontrino.f_omaggio AND righe_scontrino.input_filename NOT LIKE '%xml',
			CASE
				WHEN righe_scontrino._prezzo_dbg IS NOT NULL THEN righe_scontrino._prezzo_dbg
				WHEN righe_scontrino._prezzo_ext_negozi IS NOT NULL THEN righe_scontrino._prezzo_ext_negozi
				WHEN righe_scontrino._prezzo_ext_nazioni IS NOT NULL THEN righe_scontrino._prezzo_ext_nazioni
				WHEN righe_scontrino.input_filename LIKE 'RAMONDA%' THEN righe_scontrino.prezzo_listino_sell_out_nazionale * righe_scontrino.pezzi
				ELSE righe_scontrino.fatturato
			END,
			righe_scontrino.fatturato
		) AS fatturato,
		
		IF(
			righe_scontrino.fatturato = 0 AND NOT righe_scontrino.f_omaggio AND righe_scontrino.input_filename NOT LIKE '%xml',
			CASE
				WHEN righe_scontrino._prezzo_dbg IS NOT NULL THEN righe_scontrino._prezzo_dbg
				WHEN righe_scontrino._prezzo_ext_negozi IS NOT NULL THEN righe_scontrino._prezzo_ext_negozi
				WHEN righe_scontrino._prezzo_ext_nazioni IS NOT NULL THEN righe_scontrino._prezzo_ext_nazioni
				WHEN righe_scontrino.input_filename LIKE 'RAMONDA%' THEN righe_scontrino.prezzo_listino_sell_out_nazionale * righe_scontrino.pezzi
				ELSE righe_scontrino.fatturato_netto
			END,
			righe_scontrino.fatturato_netto
		) AS fatturato_netto,
		
		ROUND(
			COALESCE(
				IF(
					righe_scontrino.fatturato = 0 AND NOT righe_scontrino.f_omaggio AND righe_scontrino.input_filename NOT LIKE '%xml',
					CASE
						WHEN righe_scontrino._prezzo_dbg IS NOT NULL THEN righe_scontrino._controvalore_dbg
						WHEN righe_scontrino._prezzo_ext_negozi IS NOT NULL THEN righe_scontrino._controvalore_ext_negozi
						WHEN righe_scontrino._prezzo_ext_nazioni IS NOT NULL THEN righe_scontrino._controvalore_ext_nazioni
						WHEN righe_scontrino.input_filename LIKE 'RAMONDA%' THEN righe_scontrino.prezzo_listino_sell_out_nazionale_controvalore * righe_scontrino.pezzi
						ELSE righe_scontrino.controvalore_euro
					END,
					righe_scontrino.controvalore_euro
				),
				(SAFE_DIVIDE(prezzo_listino_sell_out_nazionale_controvalore, prezzo_listino_sell_out_nazionale)) * righe_scontrino.fatturato_netto,
				0.0
			),
			2 -- n decimali
		) AS controvalore_euro,
		
		ROUND(
			COALESCE(
				IF(
					righe_scontrino.fatturato = 0 AND NOT righe_scontrino.f_omaggio AND righe_scontrino.input_filename NOT LIKE '%xml',
					CASE
						WHEN righe_scontrino._prezzo_dbg IS NOT NULL THEN righe_scontrino._controvalore_dbg
						WHEN righe_scontrino._prezzo_ext_negozi IS NOT NULL THEN righe_scontrino._controvalore_ext_negozi
						WHEN righe_scontrino._prezzo_ext_nazioni IS NOT NULL THEN righe_scontrino._controvalore_ext_nazioni
						WHEN righe_scontrino.input_filename LIKE 'RAMONDA%' THEN righe_scontrino.prezzo_listino_sell_out_nazionale_controvalore * righe_scontrino.pezzi
						ELSE righe_scontrino.controvalore_netto_euro
					END,
					righe_scontrino.controvalore_netto_euro
				),
				(SAFE_DIVIDE(prezzo_listino_sell_out_nazionale_controvalore, prezzo_listino_sell_out_nazionale)) * righe_scontrino.fatturato_netto,
				0.0
			),
			2 -- n decimali
		) AS controvalore_netto_euro,
		
		# TS_MODIFICA
		IF (
				righe_scontrino.anno_old != anno
			OR righe_scontrino.modello_old != modello
			OR righe_scontrino.stagionale_old != stagionale
			OR righe_scontrino.stagione_old != stagione
			OR righe_scontrino.uscita_collezione_old != uscita_collezione
			OR righe_scontrino.variante_old != variante
			OR righe_scontrino.consegna_old != consegna
			OR righe_scontrino.classe_old != classe
			OR righe_scontrino.tema_old != tema
			OR righe_scontrino.modello_retail_old != modello_retail
			OR righe_scontrino.ean_old = ean
			OR righe_scontrino.prezzo_listino_sell_out_nazionale_old != prezzo_listino_sell_out_nazionale
			OR righe_scontrino.prezzo_listino_sell_out_nazionale_controvalore_old != prezzo_listino_sell_out_nazionale, 
			CURRENT_TIMESTAMP, ts_modifica     
		) AS ts_modifica
	FROM (    
		# STEP 3: RECUPERO INFO PREZZI
		SELECT DISTINCT
			R.* EXCEPT(
				prezzo_listino_sell_out_nazionale,
				prezzo_listino_sell_out_nazionale_controvalore,
				desc_taglia,
				prezzo_listino_sell_in_negozio,
				prezzo_listino_sell_in_negozio_controvalore,
				prezzo_listino_sell_in_italia,
				prezzo_listino_sell_out_italia,
				tipo_taglia,
				indice_taglia,
				valuta_pagamento,
				listino_acquisto,
				listino_vendita
			),
			COALESCE(
				NULLIF(P_VENDITA.prezzo, 0.0),
				NULLIF(PREZZI_NEGOZI.prezzo, 0.0),
				NULLIF(PREZZI_NAZIONI.prezzo, 0.0),
				NULLIF(R.prezzo_listino_sell_out_nazionale, 0.0),
				0.0
			) AS prezzo_listino_sell_out_nazionale,
			COALESCE(
				NULLIF(P_VENDITA.controvalore, 0.0),
				NULLIF(PREZZI_NEGOZI.controvalore, 0.0),
				NULLIF(PREZZI_NAZIONI.controvalore, 0.0),
				NULLIF(R.prezzo_listino_sell_out_nazionale_controvalore, 0.0),
				0.0
			) AS prezzo_listino_sell_out_nazionale_controvalore,
			R.prezzo_listino_sell_out_nazionale AS prezzo_listino_sell_out_nazionale_old,
			R.prezzo_listino_sell_out_nazionale_controvalore AS prezzo_listino_sell_out_nazionale_controvalore_old,
			-- ci si aspetta che nella tabella riga scontrino, si gia stato associato il listino corretto
			-- prezzi listino A e V IT
			COALESCE(P_ACQUISTO_IT.prezzo, R.prezzo_listino_sell_in_italia, 0.0) AS prezzo_listino_sell_in_italia,
			COALESCE(P_VENDITA_IT.prezzo, R.prezzo_listino_sell_out_italia, 0.0) AS prezzo_listino_sell_out_italia,
			-- prezzo listino A + controvalore
			COALESCE(
				NULLIF(P_ACQUISTO.prezzo, 0.0),
				NULLIF(R.prezzo_listino_sell_in_negozio, 0.0),
				NULLIF(D_PREZZO_EXT_A.prezzo, 0.0),
				D_PREZZO_EXT_A_NAZIONE.prezzo,
				0.0
			) AS prezzo_listino_sell_in_negozio,
			COALESCE(
				NULLIF(P_ACQUISTO.controvalore, 0.0),
				NULLIF(R.prezzo_listino_sell_in_negozio_controvalore, 0.0),
				NULLIF(D_PREZZO_EXT_A.controvalore, 0.0),
				D_PREZZO_EXT_A_NAZIONE.controvalore,
				0.0
			) AS prezzo_listino_sell_in_negozio_controvalore,
			COALESCE(tipo_taglia_nazione.taglia, R.desc_taglia) AS desc_taglia,
			COALESCE(
				-- viene usata la divisa manuale solo se e servita per trovare un prezzo DBG o EXT
				IF(LISTINI_MANUALI.divisa IS NOT NULL AND COALESCE(P_VENDITA.prezzo, PREZZI_NEGOZI.prezzo, PREZZI_NAZIONI.prezzo) IS NOT NULL, LISTINI_MANUALI.divisa, NULL),
				IF(
					R.project_name = "bmsfranchising",
					COALESCE(LISTINI.divisa, R.valuta_pagamento), -- se la ricerca sui listini non ha successo, viene usata quella del file
					UPPER(COALESCE(R.valuta_pagamento, P_VENDITA.divisa, ricarichi.divisa))
				)
			) AS valuta_pagamento,
			
			# se i prezzi non provengono da D_PREZZO, i listini vengono annullati
			IF(P_ACQUISTO.prezzo IS NULL, NULL, COALESCE(CLIENTELE.listino_acquisto, R.listino_acquisto)) AS listino_acquisto,
			IF(P_VENDITA.prezzo IS NULL, NULL, COALESCE(LISTINI_MANUALI.listino, CLIENTELE.listino_vendita, R.listino_vendita)) AS listino_vendita,
			
			P_VENDITA.prezzo AS _prezzo_dbg,
			P_VENDITA.controvalore AS _controvalore_dbg,
			PREZZI_NEGOZI.prezzo AS _prezzo_ext_negozi,
			PREZZI_NEGOZI.controvalore AS _controvalore_ext_negozi,
			PREZZI_NAZIONI.prezzo AS _prezzo_ext_nazioni,
			PREZZI_NAZIONI.controvalore AS _controvalore_ext_nazioni,
			
			ROW_NUMBER() OVER( -- tra i campi raggruppa anche per rank_most_recent, che essendo un ROW_NUMBER, andrebbe in conflitto con questo rank
				PARTITION BY R.input_filename, R.ts_inserimento, R.ts_creazione, R.negozio, R.data_vendita, R.id_vendita, R.id, R.pezzi, R.barcode_negozio, R.societa
				ORDER BY
					R.anno >= EXTRACT(YEAR FROM R.data_vendita) DESC, -- la priorita va all'ast attuale o al prossimo
					R.anno DESC -- altrimenti consideriamo l'ast piu recente
			) AS _rank_decennium_bug
		FROM 
		(
			# STEP 2: SECONDO E TERZO FALLBACK PER IL RECUPERO DELLE INFO PRODOTTO DALLA V_MODELLO_BARCODE_NEGOZIO
			SELECT DISTINCT riga.* EXCEPT(anno, societa, modello, modello_retail, variante, stagione, stagionale, tipo_taglia, consegna, classe, uscita_collezione, tema, modello_barcode_negozio),
				-- calcolo dell'ana prodotto in ordine di priorita per JOIN normale, mod_retail-var e mod_retail
				COALESCE(riga.societa, mod_ret_var.societa, mod_var.societa) AS societa,
				COALESCE(riga.anno, mod_ret_var.anno, mod_var.anno) AS anno,
				COALESCE(riga.stagione, mod_ret_var.stagione, mod_var.stagione) AS stagione,
				COALESCE(riga.modello, mod_ret_var.modello, mod_var.modello) AS modello,
				COALESCE(riga.modello_retail, mod_ret_var.modello_retail, mod_var.modello_retail) AS modello_retail,
				COALESCE(riga.variante, mod_ret_var.variante, mod_var.variante) AS variante,
				COALESCE(riga.stagionale, mod_ret_var.stagionale, mod_var.stagionale) AS stagionale,
				COALESCE(riga.tipo_taglia, mod_ret_var.tipo_taglia, mod_var.tipo_taglia) AS tipo_taglia,
				COALESCE(riga.consegna, mod_ret_var.consegna, mod_var.consegna) AS consegna,
				COALESCE(riga.uscita_collezione, mod_ret_var.uscita_collezione, mod_var.uscita_collezione) AS uscita_collezione,
				COALESCE(riga.classe, mod_ret_var.classe, mod_var.classe) AS classe,
				COALESCE(riga.tema, mod_ret_var.tema, mod_var.tema) AS tema
			FROM (
			# STEP 1: RECUPERO INFO PRODOTTO
			SELECT
				R.* EXCEPT(anno, modello, stagionale, stagione, uscita_collezione, variante, consegna, classe, tema, modello_retail, ean),
				R.anno AS anno_old,
				R.modello AS modello_old,
				R.stagionale AS stagionale_old,
				R.stagione AS stagione_old,
				R.uscita_collezione AS uscita_collezione_old,
				R.variante AS variante_old,
				R.consegna AS consegna_old,
				R.classe AS classe_old,
				R.tema AS tema_old,
				R.modello_retail AS modello_retail_old,
				R.ean AS ean_old,
				# campi presi in fallback dal prodotto
				COALESCE(BACKUP_PRODOTTI.anno, R.anno) AS anno,
				COALESCE(BACKUP_PRODOTTI.stagione, R.stagione) AS stagione,
				COALESCE(BACKUP_PRODOTTI.uscita_collezione, R.uscita_collezione) AS uscita_collezione,
				COALESCE(BACKUP_PRODOTTI.modello, R.modello) AS modello,
				COALESCE(BACKUP_PRODOTTI.variante, R.variante) AS variante,
				COALESCE(BACKUP_PRODOTTI.stagionale, R.stagionale) AS stagionale,
				BACKUP_PRODOTTI.tipo_taglia AS tipo_taglia,
				COALESCE(BACKUP_PRODOTTI.consegna, R.consegna) AS consegna,
				COALESCE(BACKUP_PRODOTTI.classe, R.classe) AS classe,
				COALESCE(BACKUP_PRODOTTI.tema, R.tema) AS tema,
				COALESCE(BACKUP_PRODOTTI.modello_retail, R.modello_retail) AS modello_retail,
				COALESCE(BACKUP_PRODOTTI.ean, R.ean) AS ean,
				-- modello_retail per JOIN successiva
				SUBSTR(R.barcode_negozio, 1, 10) AS modello_barcode_negozio,
				BACKUP_PRODOTTI.indice_taglia AS indice_taglia
				FROM ${ref("{from_table}")} AS R
				LEFT JOIN BACKUP_PRODOTTI ON (
					BACKUP_PRODOTTI.barcode_negozio = R.barcode_negozio
					AND BACKUP_PRODOTTI.societa = R.societa
					-- FGEDW-983: per il decennium bug vengono considerati solo i capi di massimo 8 anni indietro e 1 anno avanti
					AND BACKUP_PRODOTTI.anno BETWEEN (CAST(anno_transazione AS INT64) - 8) AND (CAST(anno_transazione AS INT64) + 1)
				)
			) riga
			LEFT JOIN ${ref("V_MODELLO_BARCODE_NEGOZIO")} mod_ret_var ON (
				riga.societa = mod_ret_var.societa
				AND riga.modello_barcode_negozio = mod_ret_var.modello_barcode_negozio
				AND riga.variante = mod_ret_var.variante
				-- FGEDW-983: per il decennium bug vengono considerati solo i capi di massimo 8 anni indietro e 1 anno avanti
				AND mod_ret_var.anno BETWEEN (CAST(anno_transazione AS INT64) - 8) AND (CAST(anno_transazione AS INT64) + 1)
			) -- JOIN con variante
			LEFT JOIN (
				SELECT
					modello_barcode_negozio,
					societa,
					anno,
					stagione,
					-- TODO invece di any_value di tutti i campi prendere la prima riga con OFFSET
					ANY_VALUE(modello) AS modello,
					ANY_VALUE(modello_retail) AS modello_retail,
					ANY_VALUE(variante) AS variante,
					ANY_VALUE(tipo_taglia) AS tipo_taglia,
					ANY_VALUE(consegna) AS consegna,
					ANY_VALUE(classe) AS classe,
					ANY_VALUE(uscita_collezione) AS uscita_collezione,
					ANY_VALUE(tema) AS tema,
					CAST(NULL AS STRING) AS stagionale -- non definito per mod-societa
				FROM ${ref("V_MODELLO_BARCODE_NEGOZIO")}
				GROUP BY modello_barcode_negozio, societa, anno, stagione
			) mod_var ON (
				COALESCE(riga.societa, mod_ret_var.societa) = mod_var.societa
				AND COALESCE(riga.modello_barcode_negozio, mod_ret_var.modello_barcode_negozio) = mod_var.modello_barcode_negozio
				-- FGEDW-983: per il decennium bug vengono considerati solo i capi di massimo 8 anni indietro e 1 anno avanti
				AND mod_var.anno BETWEEN (CAST(anno_transazione AS INT64) - 8) AND (CAST(anno_transazione AS INT64) + 1)
			)
			WHERE EXTRACT(YEAR FROM data_vendita) IN ({partitions})
		) R
		LEFT JOIN (
			SELECT tipo_taglia_nazione.societa, taglie_nazione.indice_taglia, taglie_nazione.taglia, tipo_taglia_nazione.tipo_taglia, tipo_taglia_nazione.nazione
			FROM ${ref("D_TIPO_TAGLIA_NAZIONE")} tipo_taglia_nazione, UNNEST(taglie_nazione) AS taglie_nazione
		) AS tipo_taglia_nazione ON (
				R.societa = tipo_taglia_nazione.societa
			AND R.tipo_taglia = tipo_taglia_nazione.tipo_taglia
			AND R.indice_taglia = tipo_taglia_nazione.indice_taglia
			AND R.nazione_negozio = tipo_taglia_nazione.nazione
		)
		LEFT JOIN ${ref("D_NEGOZIO_LISTINO_EXT")} LISTINI_MANUALI ON(
			R.negozio = LISTINI_MANUALI.negozio
			AND R.societa = LISTINI_MANUALI.societa
			AND R.anno = LISTINI_MANUALI.anno
			AND R.stagione = LISTINI_MANUALI.stagione
			AND (LISTINI_MANUALI.data_inizio IS NULL OR LISTINI_MANUALI.data_inizio <= DATE(R.ts_creazione))
			AND (LISTINI_MANUALI.data_fine IS NULL OR LISTINI_MANUALI.data_fine >= DATE(R.ts_creazione))
		)
		LEFT JOIN CLIENTELE ON (
			R.societa = CLIENTELE.societa
			AND R.anno = CLIENTELE.anno
			AND R.stagione = CLIENTELE.stagione
			AND R.uscita_collezione = CLIENTELE.uscita_collezione
			AND R.codice_cliente = CLIENTELE.cliente
		)
		LEFT JOIN ${ref("D_LISTINO")} LISTINI ON (
			R.societa = LISTINI.societa
			AND R.anno = LISTINI.anno
			AND R.stagione = LISTINI.stagione
			AND COALESCE(CLIENTELE.listino_vendita, R.listino_vendita) = LISTINI.listino
		)
		LEFT JOIN ${ref("D_RICARICHI")} ricarichi ON ( -- JOIN per fallback di valuta_pagamento
			R.negozio = ricarichi.negozio
			AND CONCAT(R.anno, R.stagione) = ricarichi.annostag
		)
		LEFT JOIN PREZZI_VALIDI AS P_ACQUISTO ON (
			P_ACQUISTO.tipo_prezzo = 'A'
			AND R.societa = P_ACQUISTO.societa
			AND R.modello = P_ACQUISTO.modello
			AND COALESCE(CLIENTELE.listino_acquisto, R.listino_acquisto) = P_ACQUISTO.listino
			AND R.anno = P_ACQUISTO.anno
			AND R.stagione = P_ACQUISTO.stagione
		)
		LEFT JOIN PREZZI_VALIDI AS P_VENDITA ON (
			P_VENDITA.tipo_prezzo = 'V'
			AND R.societa = P_VENDITA.societa
			AND R.modello = P_VENDITA.modello
			AND R.anno = P_VENDITA.anno
			AND R.stagione = P_VENDITA.stagione
			AND (
				COALESCE(
					LISTINI_MANUALI.divisa,
					IF( -- la valuta negli XML da franch puo non essere coerente con il fatturato
						R.project_name = "bmsfranchising",
						LISTINI.divisa,
						COALESCE(R.valuta_pagamento, ricarichi.divisa)
					)
				) = P_VENDITA.divisa
				OR R.valuta_pagamento IS NULL -- per valuta nulla viene sempre accettato il prezzo
			)
			AND (
				IF(
					R.societa = 'DT',
					CLIENTELE.cliente = P_VENDITA.cliente AND COALESCE(
						IF(R.data_vendita BETWEEN P_VENDITA.data_inizio AND P_VENDITA.data_fine, True, NULL),
						IF(R.data_vendita BETWEEN P_VENDITA.data_inizio AND P_VENDITA.data_fine_calcolata, True, NULL)
					),
					COALESCE(LISTINI_MANUALI.listino, CLIENTELE.listino_vendita, R.listino_vendita) = P_VENDITA.listino
				)
			)
		)
		LEFT JOIN CLIENTELE_IT ON (
			R.societa = CLIENTELE_IT.societa
			AND R.anno = CLIENTELE_IT.anno
			AND R.stagione = CLIENTELE_IT.stagione
			AND R.uscita_collezione = CLIENTELE_IT.uscita_collezione
		)
		LEFT JOIN PREZZI_VALIDI AS P_ACQUISTO_IT ON (
			P_ACQUISTO_IT.tipo_prezzo = 'A'
			AND R.societa = P_ACQUISTO_IT.societa
			AND R.modello = P_ACQUISTO_IT.modello
			AND CLIENTELE_IT.listino_acquisto = P_ACQUISTO_IT.listino
			AND R.anno = P_ACQUISTO_IT.anno
			AND R.stagione = P_ACQUISTO_IT.stagione
		)
		LEFT JOIN PREZZI_VALIDI AS P_VENDITA_IT ON (
			P_VENDITA_IT.tipo_prezzo = 'V'
			AND R.societa = P_VENDITA_IT.societa
			AND R.modello = P_VENDITA_IT.modello
			AND R.anno = P_VENDITA_IT.anno
			AND R.stagione = P_VENDITA_IT.stagione
			AND (
				IF(R.societa = 'DT',
				CLIENTELE_IT.cliente = P_VENDITA_IT.cliente
				AND COALESCE(
						IF(R.data_vendita BETWEEN P_VENDITA_IT.data_inizio AND P_VENDITA_IT.data_fine, True, NULL),
						IF(R.data_vendita BETWEEN P_VENDITA_IT.data_inizio AND P_VENDITA_IT.data_fine_calcolata, True, NULL)
				),
				CLIENTELE_IT.listino_vendita = P_VENDITA_IT.listino
				)
			)
		)
		LEFT JOIN D_PREZZO_EXT_PREZZI_NEGOZI AS PREZZI_NEGOZI ON (
			PREZZI_NEGOZI.societa = R.societa
			AND PREZZI_NEGOZI.annostagione = CAST(CONCAT(R.anno, R.stagione) AS INT64)
			AND PREZZI_NEGOZI.negozio = R.negozio
			AND PREZZI_NEGOZI.tipo_negozio_retail = R.tipo_negozio_retail
			AND PREZZI_NEGOZI.nazione_negozio = R.nazione_negozio
			AND PREZZI_NEGOZI.modello = R.modello
			AND COALESCE(
				LISTINI_MANUALI.divisa,
				IF( -- la valuta negli XML da franch puo non essere coerente con il fatturato
					R.project_name = "bmsfranchising",
					LISTINI.divisa,
					COALESCE(R.valuta_pagamento, ricarichi.divisa)
				)
			) = PREZZI_NEGOZI.divisa
		)
		LEFT JOIN D_PREZZO_EXT_PREZZI_NAZIONI AS PREZZI_NAZIONI ON (
			PREZZI_NAZIONI.societa = R.societa
			AND PREZZI_NAZIONI.annostagione = CAST(CONCAT(R.anno, R.stagione) AS INT64)
			AND PREZZI_NAZIONI.nazione_negozio = R.nazione_negozio
			AND PREZZI_NAZIONI.tipo_negozio_retail = R.tipo_negozio_retail
			AND PREZZI_NAZIONI.modello = R.modello
			AND COALESCE(
				LISTINI_MANUALI.divisa,
				IF( -- la valuta negli XML da franch puo non essere coerente con il fatturato
					R.project_name = "bmsfranchising",
					LISTINI.divisa,
					COALESCE(R.valuta_pagamento, ricarichi.divisa)
				)
			) = PREZZI_NAZIONI.divisa
		)
		LEFT JOIN D_PREZZO_EXT_A ON (
				D_PREZZO_EXT_A.societa = R.societa 
			AND D_PREZZO_EXT_A.annostagione = CAST(CONCAT(R.anno, R.stagione) AS INT64)
			AND D_PREZZO_EXT_A.negozio_retail = R.negozio
			AND D_PREZZO_EXT_A.modello = R.modello
		)
		LEFT JOIN D_PREZZO_EXT_A_NAZIONE ON (
				D_PREZZO_EXT_A_NAZIONE.societa = R.societa 
			AND D_PREZZO_EXT_A_NAZIONE.annostagione = CAST(CONCAT(R.anno, R.stagione) AS INT64)
			AND D_PREZZO_EXT_A_NAZIONE.nazione_negozio = R.nazione_negozio
			AND D_PREZZO_EXT_A_NAZIONE.modello = R.modello
			AND D_PREZZO_EXT_A_NAZIONE.tipo_negozio_retail = R.tipo_negozio_retail
		)
	) righe_scontrino
	WHERE _rank_decennium_bug = 1
)
		