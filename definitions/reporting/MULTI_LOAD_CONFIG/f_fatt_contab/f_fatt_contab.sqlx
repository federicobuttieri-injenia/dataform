config {
    type: "table",
    schema: DM_DIGITAL,
    name: "F_FATTURATO_CONTABILIZZATO_20230101"
}

        WITH fatturato AS (
            SELECT DISTINCT insegna, country, corporate_customer_id, mail_cliente, order_number, delivery_name, rma_number, rma_type, return_reason, sku, sku_type, order_date, 
            daily_sales_date, shipment_date, delivery_date, return_open_date, return_close_date, time_order_to_sales, time_sales_to_shipment, time_shipment_to_delivery, note, 
            point_of_presence, shipping_address, shipping_address_store, shipping_address_customer, zip_code, o2o_order_click_collect, o2o_exchange_online, o2o_return_in_store, 
            payment_method, promo_type, promo_code, currency, mark_down, shipping_amt_trx, shipping_amt_fnc, 
            ARRAY_TO_STRING(giftcard_code, ':::') AS giftcard_code, 
            giftcard_amount, record_type, quantity, quantity_return, 
            list_price, unit_selling_price, gross_amount_trx, net_amount_trx, vat_amount_trx, vat_rate, exchange_rate, gross_amount_fnc, net_amount_fnc, vat_amount_fnc, 
            markdown_ratio, revenue_net, revenue_gross, vat, return_revenue_net, return_revenue_gross, return_vat, key_stock, key_web_analytics, project_name, 
            ts_creazione, ts_inserimento, ts_modifica, line_id, tracking_number,
            CASE
                WHEN insegna IN ('MM', 'SP', 'WE') THEN 'MM'
                WHEN insegna IN ('MC', 'PB') THEN 'MN'
                WHEN insegna IN ('MA', 'IB') THEN 'MA'
                WHEN insegna IN ('MR') THEN 'MR'
                WHEN insegna IN ('DT', 'FM') THEN 'DT'
            END AS societa,
            CONCAT(insegna, "-", country) AS key_region,
            CASE 
                WHEN insegna IN ('SP', 'WE') THEN CONCAT(insegna,sku) 
                ELSE sku 
            END AS b2c_sku,
            ROW_NUMBER() OVER (PARTITION BY order_number, delivery_name, rma_number, daily_sales_date, sku, line_id ORDER BY project_name = 'OPS' DESC, ts_creazione DESC, ts_inserimento DESC, ts_modifica DESC, record_type = 'INSERT' DESC, delivery_date IS NULL) AS rnk    
            FROM ${ref("DM_DIGITAL_STAGING", "S_FATTURATO_CONTABILIZZATO_2*")}
        ),
        regions AS (
            SELECT CONCAT(brand, "-", country) AS key, brand, region, country, warehouse_code, currency_trx, currency_fnc, date_begin, date_end
            FROM ${ref("D_REGION")}
        ),
        prodotto AS (
            SELECT CONCAT(societa, '-', barcode_negozio) AS key, societa, nome, desc_colore, annostagione,
            DENSE_RANK() OVER (PARTITION BY societa, barcode_negozio ORDER BY anno DESC, stagione DESC) AS rnk_prodotto
            FROM ${ref("D_PRODOTTO")}
        ),
        prodotto_b2c AS (
            SELECT DISTINCT brand, annostagione, modello_barcode_negozio,
            FROM  ${ref("DM_DIGITAL", "D_PRODOTTO_B2C")}
            ORDER BY modello_barcode_negozio, brand, annostagione DESC
        ),
        prodotto_b2c_ranked AS (
            SELECT *, ROW_NUMBER() OVER (PARTITION BY modello_barcode_negozio ORDER BY annostagione DESC) as annostagione_rank
            FROM prodotto_b2c
            ORDER BY modello_barcode_negozio, brand, annostagione DESC
        ),
        prodotto_b2c_latest_season AS (
            SELECT * FROM prodotto_b2c_ranked
            WHERE annostagione_rank = 1
        ),
        prodotto_b2c_final AS (
            SELECT 
                DISTINCT CONCAT(pb2c.brand, "-", pb2c.region, "-", pb2c.modello_barcode_negozio) AS key, 
                pb2c_ls.modello_barcode_negozio AS modello_barcode_negozio,
                pb2c.brand, pb2c.region, pb2c.annostagione, 
                pb2c.b2c_category
            FROM ${ref("DM_DIGITAL", "D_PRODOTTO_B2C")} pb2c
            INNER JOIN prodotto_b2c_latest_season pb2c_ls 
            USING(modello_barcode_negozio, brand, annostagione)
            ORDER BY pb2c.brand, pb2c.region, pb2c.annostagione DESC
        ),
        se_rate AS (
            SELECT CONCAT(anno,stagione,"-",currency_iso_code) AS key, anno, stagione, currency_iso_code, seasonal_exchange_rate
            FROM ${ref("D_SEASONAL_EXCHANGE_RATE")}
        ),
        codici_esistenti AS (
            SELECT DISTINCT iso_code
            FROM ${ref("F_TASSO_QUOTIDIANO")}
        ),
        tassi AS (
            SELECT DISTINCT
                iso_code AS currency,
                reference_date,
                COALESCE(avg_rate, first_avg_rate, last_avg_rate) AS avg_rate
            FROM (
                SELECT DISTINCT
                *,
                LAST_VALUE(avg_rate IGNORE NULLS) OVER(PARTITION BY iso_code ORDER BY reference_date ASC) AS first_avg_rate,
                LAST_VALUE(avg_rate IGNORE NULLS) OVER(PARTITION BY iso_code ORDER BY reference_date DESC) AS last_avg_rate,
                FROM (
                    SELECT iso_code, reference_date, avg_rate
                    FROM ${ref("F_TASSO_QUOTIDIANO")} ta 
                    UNION ALL
                    SELECT codici_esistenti.iso_code, te.data, NULL 
                    FROM ${ref("DM_SELLOUT", "D_TEMPO")} te, codici_esistenti
                )
            )
        ),
        date_rate AS (
            SELECT DISTINCT reference_date, iso_code, avg_rate
            FROM (
                SELECT DISTINCT data reference_date, iso_code
                FROM ${ref("DM_SELLOUT", "D_TEMPO")}, ${ref("F_TASSO_QUOTIDIANO")}
            )
            LEFT JOIN ${ref("F_TASSO_QUOTIDIANO")} USING (reference_date, iso_code)
            WHERE reference_date <= CURRENT_DATE()
        ),
        fnc_rate AS (
            SELECT 
                reference_date, 
                iso_code, 
                avg_rate,
                LAST_VALUE(avg_rate IGNORE NULLS) OVER (PARTITION BY iso_code ORDER BY reference_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS comp_rate
                FROM date_rate
        ),
        date_deliveries_resi AS (
            SELECT DISTINCT deliveries.daily_sales_date AS data_delivery,
            delivery_name,
            country
            FROM ${ref("DM_DIGITAL", "F_FATTURATO_CONTABILIZZATO_2*")} deliveries
            WHERE deliveries.quantity > 0 
        ),
        fatturato_pre_conversione AS (
        SELECT 
            f.* EXCEPT(giftcard_code, record_type, rnk, societa, key_region, b2c_sku),
            SPLIT(giftcard_code, ':::') AS giftcard_code,
            IF(quantity > 0, "O", "R") AS record_type,
            CAST(f.list_price / IFNULL(se_rate.seasonal_exchange_rate, 1) AS NUMERIC) AS list_price_seasonal_exchange,
            CAST(f.unit_selling_price / IFNULL(se_rate.seasonal_exchange_rate, 1) AS NUMERIC) AS unit_selling_price_seasonal_exchange,
            CAST(f.revenue_net / IFNULL(se_rate.seasonal_exchange_rate, 1) AS NUMERIC) AS revenue_net_seasonal_exchange,
            CAST(f.revenue_gross / IFNULL(se_rate.seasonal_exchange_rate, 1) AS NUMERIC) AS revenue_gross_seasonal_exchange,
            CAST(f.vat / IFNULL(se_rate.seasonal_exchange_rate, 1) AS NUMERIC) AS vat_seasonal_exchange,
            CAST(f.return_revenue_net / IFNULL(se_rate.seasonal_exchange_rate, 1) AS NUMERIC) AS return_revenue_net_seasonal_exchange,
            CAST(f.return_revenue_gross / IFNULL(se_rate.seasonal_exchange_rate, 1) AS NUMERIC) AS return_revenue_gross_seasonal_exchange,
            CAST(f.return_vat / IFNULL(se_rate.seasonal_exchange_rate, 1) AS NUMERIC) AS return_vat_seasonal_exchange,
            CAST(f.list_price * t.avg_rate AS NUMERIC) AS list_price_daily_exchange,
            CAST(f.unit_selling_price * t.avg_rate AS NUMERIC) AS unit_selling_price_daily_exchange,
            CAST(f.revenue_net * t.avg_rate AS NUMERIC) AS revenue_net_daily_exchange,
            CAST(f.revenue_gross * t.avg_rate AS NUMERIC) AS revenue_gross_daily_exchange,
            CAST(f.vat * t.avg_rate AS NUMERIC) AS vat_daily_exchange,
            CAST(f.return_revenue_net * t.avg_rate AS NUMERIC) AS return_revenue_net_daily_exchange,
            CAST(f.return_revenue_gross * t.avg_rate AS NUMERIC) AS return_revenue_gross_daily_exchange,
            CAST(f.return_vat  * t.avg_rate AS NUMERIC) AS return_vat_daily_exchange,
            CAST(IF(f.quantity > 0, f.net_amount_trx, 0) AS NUMERIC) AS revenue_net_trx,
            CAST(IF(f.quantity > 0, f.vat_amount_trx, 0) AS NUMERIC) AS vat_trx,
            CAST(IF(f.quantity > 0, f.gross_amount_trx, 0) AS NUMERIC) AS revenue_gross_trx,
            CAST(IF(f.quantity_return > 0, f.net_amount_trx, 0) AS NUMERIC) AS return_revenue_net_trx,
            CAST(IF(f.quantity_return > 0, f.vat_amount_trx, 0) AS NUMERIC) AS return_vat_trx,
            CAST(IF(f.quantity_return > 0, f.gross_amount_trx, 0) AS NUMERIC) AS return_revenue_gross_trx,
            IF(r.currency_trx <> r.currency_fnc, IF(f.quantity > 0, fnc_rate_orders.comp_rate, fnc_rate_returns.comp_rate), 1) AS fnc_comp_rate
        FROM fatturato f
        LEFT JOIN regions r ON (f.key_region = r.key AND 
            CASE
                WHEN r.date_end IS NOT NULL THEN (f.daily_sales_date BETWEEN r.date_begin AND r.date_end)
                WHEN r.date_end IS NULL THEN (f.daily_sales_date >= r.date_begin)
            END)
        LEFT JOIN prodotto p ON (CONCAT(f.societa, '-', f.sku) = p.key and p.rnk_prodotto = 1)
        LEFT JOIN prodotto_b2c_final  pb2c ON (CONCAT(f.insegna, "-", r.region, "-",  SUBSTR(f.b2c_sku, 0, LENGTH(f.b2c_sku) - 4)) = pb2c.key)
        LEFT JOIN se_rate ON (CONCAT(pb2c.annostagione,"-",f.currency) = se_rate.key)
        LEFT JOIN tassi t ON (CASE f.currency
WHEN "TRL" THEN "TRY"
WHEN "EURO" THEN "EUR"
WHEN "RMB" THEN "CNY"
WHEN "YEN" THEN "JPY"
ELSE f.currency
END = t.currency AND f.daily_sales_date = t.reference_date)
        LEFT JOIN date_deliveries_resi ddr ON (ddr.delivery_name = f.delivery_name AND ddr.country = f.country)
        LEFT JOIN fnc_rate fnc_rate_orders ON (r.currency_trx = fnc_rate_orders.iso_code AND f.daily_sales_date = fnc_rate_orders.reference_date) 
        LEFT JOIN fnc_rate fnc_rate_returns ON (r.currency_trx = fnc_rate_returns.iso_code AND ddr.data_delivery = fnc_rate_returns.reference_date) 
        WHERE f.rnk = 1
        AND f.record_type != 'DELETE'
        AND daily_sales_date IN (SELECT * FROM ${ref("f_fatt_contab_input_output_partitions")})
        )
        SELECT * EXCEPT (revenue_net, vat, revenue_gross, return_revenue_net, return_vat, return_revenue_gross, fnc_comp_rate),
        IF(country = 'GB' AND project_name = 'OM', CAST((vat_trx / fnc_comp_rate) AS NUMERIC), vat) AS vat,
        IF(country = 'GB' AND project_name = 'OM', CAST((revenue_net_trx / fnc_comp_rate) AS NUMERIC), revenue_net) AS revenue_net,
        IF(country = 'GB' AND project_name = 'OM', CAST((revenue_gross_trx / fnc_comp_rate) AS NUMERIC), revenue_gross) AS revenue_gross,
        IF(country = 'GB' AND project_name = 'OM', CAST((return_revenue_net_trx / fnc_comp_rate) AS NUMERIC), return_revenue_net) AS return_revenue_net,
        IF(country = 'GB' AND project_name = 'OM', CAST((return_vat_trx / fnc_comp_rate) AS NUMERIC), return_vat) AS return_vat,
        IF(country = 'GB' AND project_name = 'OM', CAST((return_revenue_gross_trx / fnc_comp_rate) AS NUMERIC), return_revenue_gross) AS return_revenue_gross
        FROM fatturato_pre_conversione
        