config {
    type: "table",
    schema: "DM_SELLOUT",
    name: "F_ORDINATO_{int}0101"
}

WITH BACKUP_PRODOTTI AS (
	SELECT DISTINCT
		IF(barcode_negozio IS NOT NULL AND barcode_negozio != '', barcode_negozio, NULL) AS barcode_negozio,
		IF(modello_retail IS NOT NULL AND modello_retail != '', modello_retail, NULL) AS modello_retail,
		IF(ean IS NOT NULL AND ean != '', ean, NULL) AS ean,
		IF(societa IS NOT NULL AND societa !='', societa, NULL) AS societa,
		IF(anno IS NOT NULL AND anno > 0, anno, NULL) AS anno,
		IF(stagione IS NOT NULL AND stagione != 0, stagione, NULL) AS stagione,
		IF(uscita_collezione IS NOT NULL AND uscita_collezione !='', uscita_collezione, NULL) AS  uscita_collezione,
		IF(modello IS NOT NULL AND modello !='', modello, NULL) AS modello,
		IF(variante IS NOT NULL AND variante !='', variante, NULL) AS variante,
		IF(stagionale IS NOT NULL AND stagionale !='', stagionale, NULL) AS stagionale,
		IF(tipo_taglia IS NOT NULL AND tipo_taglia !='', tipo_taglia, NULL) AS tipo_taglia,
		IF(consegna IS NOT NULL AND consegna !='', consegna, NULL) AS consegna,
		IF(classe IS NOT NULL AND classe !='', classe, NULL) as classe,
		IF(tema IS NOT NULL AND tema !='', tema, NULL) as tema,
		indice_taglia
	FROM ${ref("DM_PRODOTTO", "D_PRODOTTO")}
),
NEGOZI_NEW AS (
	-- se il negozio sull ordinato non compare nella lista, viene valorizzato con porta_new
	SELECT cl.codice_cliente AS cliente, cl.societa, cl.anno, cl.stagione, STRING_AGG(DISTINCT porta) lista_porte, ANY_VALUE(porta) AS porta_new
	FROM ${ref("DM_SELLOUT", "D_PORTA")}, UNNEST(cliente) AS cl
	GROUP BY 1, 2, 3, 4
),
PREZZI_VALIDI AS (
	SELECT
		PR.anno,
		PR.stagione,
		PR.societa,
		PR.listino,
		PR.modello,
		PR.prezzo,
		PR.tipo_prezzo,
		PR.controvalore
	FROM (
		SELECT *, ROW_NUMBER() OVER(PARTITION BY societa, modello, listino, anno, stagione, tipo_prezzo ORDER BY ts_inserimento DESC, prezzo IS NULL) AS rk
		FROM ${ref("DM_PREZZO_LISTINO", "D_PREZZO")}
		WHERE tipo_prezzo IN ('A', 'V', 'S')
	) PR
	LEFT JOIN ${ref("DM_SELLOUT_STAGING", "D_TIPO_PREZZO_CLIENTE")} USING (societa, anno, stagione, cliente, tipo_prezzo, progr_periodo)
	WHERE (
		(data_inizio IS NULL AND data_fine IS NULL)
		OR (CURRENT_DATE() BETWEEN data_inizio AND data_fine)
		OR (CURRENT_DATE() >= data_inizio AND data_fine IS NULL)
		OR (data_inizio IS NULL AND CURRENT_DATE <= data_fine)
	)
	AND PR.rk = 1
),
CLIENTELE AS (
	SELECT * EXCEPT(rk)
	FROM (
		SELECT
			societa,
			anno,
			stagione,
			cliente,
			uscita_collezione,
			listino_acquisto,
			listino_vendita,
			f_tipo_ordine_riferimento,
			tipo_ordine_cliente,
			ROW_NUMBER() OVER(PARTITION BY societa, anno, stagione, cliente, uscita_collezione ORDER BY f_tipo_ordine_riferimento IS NOT NULL DESC, f_tipo_ordine_riferimento = '1' DESC, tipo_ordine_cliente = 'CV' DESC, listino_vendita IS NOT NULL DESC, listino_acquisto IS NOT NULL DESC) rk
		FROM ${ref("DM_PREZZO_LISTINO", "D_CLIENTELA")}
		WHERE validita IN ('V', '')
	)
	where rk = 1
),
CLIENTELE_IT AS (
	SELECT * EXCEPT(rk_italia)
	FROM (
		SELECT
			*,
			ROW_NUMBER() OVER(PARTITION BY societa, anno, stagione, uscita_collezione ORDER BY listino_vendita IS NOT NULL DESC, listino_acquisto IS NOT NULL DESC, f_tipo_ordine_riferimento = '1' DESC, tipo_ordine_cliente = 'CV' DESC) AS rk_italia
		FROM CLIENTELE
		JOIN (
			SELECT
				societa, anno, stagione,
				CASE
					WHEN SAFE_CAST(cliente AS INT64) BETWEEN 1 AND 599 THEN CONCAT('0015160000', SUBSTR(cliente, -3))
					WHEN cliente = '10007035' THEN '15110007035'
					WHEN SAFE_CAST(cliente AS INT64) BETWEEN 10010776 AND 10010781 THEN CONCAT('00152100', SUBSTR(cliente, -5))
					WHEN SAFE_CAST(cliente AS INT64) BETWEEN 10010828 AND 10010829 THEN CONCAT('00152100', SUBSTR(cliente, -5))
					WHEN cliente = '10010823' THEN CONCAT('00152100', SUBSTR(cliente, -5))
					WHEN cliente = '10010835' THEN CONCAT('00153100', SUBSTR(cliente, -5))
					ELSE cliente
				END AS cliente
			FROM ${ref("DM_PREZZO_LISTINO", "D_CLIENTE_STAGIONE")}
			WHERE punto_vendita_retail IN (
				'0100019',  # MM
				'0100517',  # DT
				'0100851',  # PE
				'0100607',  # MR
				'0000707',  # PB (MN)
				'0000083',  # MC (MN)
				'0100404'  # MA
			)
		) USING (anno, stagione, societa, cliente)
	)
	WHERE rk_italia = 1
)
# STEP 4: MAIN SELECT
SELECT ordinato.*  EXCEPT(anno_old,modello_old,stagionale_old,stagione_old,uscita_collezione_old,variante_old,prezzo_listino_sell_in_old,prezzo_listino_sell_in_controvalore_old,prezzo_listino_sell_out_old,prezzo_listino_sell_out_controvalore_old,prezzo_listino_sell_in_italia_old,prezzo_listino_sell_out_italia_old,ts_modifica,_rank_decennium_bug),
	# TS_MODIFICA
	IF (
		   ordinato.anno_old != anno
		OR ordinato.modello_old != modello
		OR ordinato.stagionale_old != stagionale
		OR ordinato.stagione_old != stagione
		OR ordinato.uscita_collezione_old != uscita_collezione
		OR ordinato.prezzo_listino_sell_in_old != prezzo_listino_sell_in
		OR ordinato.prezzo_listino_sell_in_controvalore_old != prezzo_listino_sell_in_controvalore
		OR ordinato.prezzo_listino_sell_out_old != prezzo_listino_sell_out
		OR ordinato.prezzo_listino_sell_out_controvalore_old != prezzo_listino_sell_out_controvalore
		OR ordinato.prezzo_listino_sell_in_italia_old != prezzo_listino_sell_in_italia
		OR ordinato.prezzo_listino_sell_out_italia_old != prezzo_listino_sell_out_italia,       
		CURRENT_TIMESTAMP, ts_modifica
	) AS ts_modifica
FROM (
	# STEP 3: RECUPERO INFO PREZZI
	SELECT ord.* EXCEPT(prezzo_listino_sell_in, prezzo_listino_sell_in_controvalore, prezzo_listino_sell_out, prezzo_listino_sell_out_controvalore, prezzo_listino_sell_in_italia, prezzo_listino_sell_out_italia),
		prezzo_listino_sell_in AS prezzo_listino_sell_in_old,
		prezzo_listino_sell_in_controvalore AS prezzo_listino_sell_in_controvalore_old,
		prezzo_listino_sell_out AS prezzo_listino_sell_out_old,
		prezzo_listino_sell_out_controvalore AS prezzo_listino_sell_out_controvalore_old,
		prezzo_listino_sell_in_italia AS prezzo_listino_sell_in_italia_old,
		prezzo_listino_sell_out_italia AS prezzo_listino_sell_out_italia_old,
		COALESCE(P_ACQUISTO.prezzo, prezzo_listino_sell_in, 0) AS prezzo_listino_sell_in,
		COALESCE(P_ACQUISTO.controvalore, prezzo_listino_sell_in_controvalore, 0) AS prezzo_listino_sell_in_controvalore,
		COALESCE(P_VENDITA.prezzo, prezzo_listino_sell_out, 0) AS prezzo_listino_sell_out,
		COALESCE(P_VENDITA.controvalore, prezzo_listino_sell_out_controvalore, 0) AS prezzo_listino_sell_out_controvalore,
		COALESCE(P_ACQUISTO_IT.prezzo, prezzo_listino_sell_out_controvalore, 0) AS prezzo_listino_sell_in_italia,
		COALESCE(P_VENDITA_IT.prezzo, prezzo_listino_sell_out_controvalore, 0) AS prezzo_listino_sell_out_italia,
		ROW_NUMBER() OVER( -- tra i campi raggruppa anche per rank_most_recent, che essendo un ROW_NUMBER, andrebbe in conflitto con questo rank
		PARTITION BY serie_ordine, numero_ordine, numero_riga, ord.indice_taglia, ord.barcode_negozio, ord.societa
			ORDER BY
				ord.anno >= EXTRACT(YEAR FROM ord.data_ordine) DESC, -- la priorita va all'ast attuale o al prossimo
				ord.anno DESC -- altrimenti consideriamo l'ast piu recente
		) AS _rank_decennium_bug
		FROM (
			# STEP 2: SECONDO E TERZO FALLBACK PER IL RECUPERO DELLE INFO PRODOTTO DALLA V_MODELLO_BARCODE_NEGOZIO
			SELECT ord.* EXCEPT(anno, societa, modello, variante, stagione, stagionale, uscita_collezione, modello_barcode_negozio),
				ord.anno AS anno_old,
				ord.modello AS modello_old,
				ord.stagionale AS stagionale_old,
				ord.stagione AS stagione_old,
				ord.uscita_collezione AS uscita_collezione_old,
				ord.variante AS variante_old,
				-- calcolo dell'ana prodotto in ordine di priorita per JOIN normale, mod_retail-var e mod_retail
				COALESCE(ord.societa, mod_ret_var.societa, mod_var.societa) AS societa,
				COALESCE(ord.anno, mod_ret_var.anno, mod_var.anno) AS anno,
				COALESCE(ord.stagione, mod_ret_var.stagione, mod_var.stagione) AS stagione,
				COALESCE(ord.modello, mod_ret_var.modello, mod_var.modello) AS modello,
				COALESCE(ord.variante, mod_ret_var.variante, mod_var.variante) AS variante,
				COALESCE(ord.stagionale, mod_ret_var.stagionale, mod_var.stagionale) AS stagionale,
				COALESCE(ord.uscita_collezione, mod_ret_var.uscita_collezione, mod_var.uscita_collezione) AS uscita_collezione,
			FROM (
				SELECT O.* EXCEPT(anno, modello, stagionale, stagione, uscita_collezione, variante, indice_taglia, negozio),
					# campi presi in fallback dal prodotto
					COALESCE(BACKUP_PRODOTTI.anno, O.anno) AS anno,
					COALESCE(BACKUP_PRODOTTI.stagione, O.stagione) AS stagione,
					COALESCE(BACKUP_PRODOTTI.uscita_collezione, O.uscita_collezione) AS uscita_collezione,
					COALESCE(BACKUP_PRODOTTI.modello, O.modello) AS modello,
					COALESCE(BACKUP_PRODOTTI.variante, O.variante) AS variante,
					COALESCE(BACKUP_PRODOTTI.stagionale, O.stagionale) AS stagionale,
					-- modello_retail per JOIN successiva
					SUBSTR(O.barcode_negozio, 1, 10) AS modello_barcode_negozio,
					COALESCE(BACKUP_PRODOTTI.indice_taglia, O.indice_taglia) AS indice_taglia,
					-- fallback per negozi modificati in anagrafica
					COALESCE(NEGOZI_NEW.negozio, O.negozio) AS negozio
				FROM ${ref("DM_SELLOUT", "{from_table}")} O
				LEFT JOIN (
					SELECT DISTINCT cli.societa, cli.anno, cli.stagione, cli.cliente, p.porta as negozio, cli.tipo_ordine_cliente
					FROM ${ref("DM_PREZZO_LISTINO", "D_CLIENTE_STAGIONE")} AS cli
					LEFT JOIN ${ref("DM_SELLOUT", "D_PORTA")} AS num_porta ON (
						CAST(cli.punto_vendita_retail AS INT64) = num_porta.numero_porta AND num_porta.numero_porta != 0
					)
					JOIN ${ref("DM_SELLOUT", "D_PORTA")} AS p ON (
						COALESCE(num_porta.porta, cli.punto_vendita_retail) = p.porta
					)
				) NEGOZI_NEW USING(cliente, societa, anno, stagione, tipo_ordine_cliente)
				LEFT JOIN BACKUP_PRODOTTI ON (
						BACKUP_PRODOTTI.societa = O.societa
					AND BACKUP_PRODOTTI.barcode_negozio = O.barcode_negozio
					AND BACKUP_PRODOTTI.anno BETWEEN (CAST(EXTRACT(YEAR FROM data_ordine) AS INT64) - 9) AND (CAST(EXTRACT(YEAR FROM data_ordine) AS INT64) + 1)
				)
			) ord
		LEFT JOIN ${ref("DM_PRODOTTO", "V_MODELLO_BARCODE_NEGOZIO")} mod_ret_var ON (
			ord.societa = mod_ret_var.societa
			AND ord.modello_barcode_negozio = mod_ret_var.modello_barcode_negozio
			AND ord.variante = mod_ret_var.variante            
			AND mod_ret_var.anno BETWEEN (CAST(EXTRACT(YEAR FROM data_ordine) AS INT64) - 9) AND (CAST(EXTRACT(YEAR FROM data_ordine) AS INT64) + 1)
		) -- JOIN con variante
		LEFT JOIN (
			SELECT
				modello_barcode_negozio,
				societa,
				anno,
				stagione,
				-- TODO invece di any_value di tutti i campi prendere la prima riga con OFFSET
				ANY_VALUE(modello) AS modello,
				ANY_VALUE(variante) AS variante,
				ANY_VALUE(tipo_taglia) AS tipo_taglia,
				ANY_VALUE(consegna) AS consegna,
				ANY_VALUE(classe) AS classe,
				ANY_VALUE(uscita_collezione) AS uscita_collezione,
				ANY_VALUE(tema) AS tema,
				CAST(NULL AS STRING) AS stagionale -- non definito per mod-societa
			FROM ${ref("DM_PRODOTTO", "V_MODELLO_BARCODE_NEGOZIO")}
			GROUP BY modello_barcode_negozio, societa, anno, stagione
		) mod_var ON (
			COALESCE(ord.societa, mod_ret_var.societa) = mod_var.societa
			AND COALESCE(ord.modello_barcode_negozio, mod_ret_var.modello_barcode_negozio) = mod_var.modello_barcode_negozio						
			AND mod_var.anno BETWEEN (CAST(EXTRACT(YEAR FROM data_ordine) AS INT64) - 9) AND (CAST(EXTRACT(YEAR FROM data_ordine) AS INT64) + 1)
		)
		WHERE EXTRACT(YEAR FROM data_ordine) IN ({partitions})
	) ord
	LEFT JOIN (
		SELECT societa, modello, listino AS listino_acquisto, prezzo, controvalore
		FROM ${ref("DM_PREZZO_LISTINO", "D_PREZZO")}
		WHERE tipo_prezzo = 'A'
	) AS P_ACQUISTO USING (societa, modello, listino_acquisto)
	LEFT JOIN (
		SELECT societa, modello, listino AS listino_vendita, prezzo, controvalore
		FROM ${ref("DM_PREZZO_LISTINO", "D_PREZZO")}
		WHERE tipo_prezzo = 'V'
	) AS P_VENDITA USING (societa, modello, listino_vendita)
	LEFT JOIN (
		SELECT
			prz.societa, modello, ANY_VALUE(prezzo) AS prezzo
		FROM PREZZI_VALIDI AS prz
		JOIN CLIENTELE_IT AS cli ON(
			cli.societa = prz.societa
		AND cli.anno = prz.anno
		AND cli.stagione = prz.stagione
		AND cli.listino_acquisto = prz.listino)
		GROUP BY 1,2
	) AS P_ACQUISTO_IT USING (societa, modello)
	LEFT JOIN (
		SELECT
			prz.societa, modello, ANY_VALUE(prezzo) AS prezzo
		FROM PREZZI_VALIDI AS prz
		JOIN CLIENTELE_IT AS cli ON(
			cli.societa = prz.societa
		AND cli.anno = prz.anno
		AND cli.stagione = prz.stagione
		AND cli.listino_vendita = prz.listino)
		GROUP BY 1,2
	) AS P_VENDITA_IT USING (societa, modello)
) ordinato
WHERE  _rank_decennium_bug = 1 
		