config {
    type: "table",
    schema: "injenia",
    name: "D_PREZZO_EXT"
}

WITH BACKUP_PRODOTTI AS (
	SELECT
		IF(societa IS NOT NULL AND societa !='', societa, NULL) AS societa,
		IF(anno IS NOT NULL AND anno > 0, anno, NULL) AS anno,
		IF(stagione IS NOT NULL AND stagione != 0, stagione, NULL) AS stagione,
		IF(modello IS NOT NULL AND modello !='', modello, NULL) AS modello,
		IF(modello_barcode_negozio IS NOT NULL AND modello_barcode_negozio !='', modello_barcode_negozio, NULL) AS modello_retail,
		annostagione
	FROM `mmfg-dwh-gruppo-prod.DM_PRODOTTO.D_PRODOTTO`
	WHERE annostagione IN (SELECT * FROM ${ref("d_prezzo_ext_input_output_partitions")})
), 
BACKUP_NEGOZI AS ( # necessario per record provenienti da BMS senza tipo_negozio
	SELECT DISTINCT porta AS negozio, nazione AS nazione_negozio, tipo_negozio_retail
	FROM `mmfg-dwh-gruppo-prod.DM_SELLOUT.D_PORTA` 
),
TASSI_CAMBIO_QUOTIDIANI AS (
	SELECT
		tassi.* EXCEPT(avg_rate),
		COALESCE(
			avg_rate,
			LAST_VALUE(avg_rate IGNORE NULLS) OVER(PARTITION BY iso_code ORDER BY reference_date DESC),
			LAST_VALUE(avg_rate IGNORE NULLS) OVER(PARTITION BY iso_code ORDER BY reference_date ASC)
		) AS avg_rate
	FROM (
			SELECT
				IF(ta.iso_code IS NULL, codici_esistenti.iso_code, ta.iso_code) AS iso_code,
				IF(reference_date IS NULL, data, reference_date) AS reference_date,
				CAST(avg_rate AS FLOAT64) AS avg_rate,
			FROM `mmfg-dwh-gruppo-prod.DM_SELLOUT.D_TEMPO` te
			CROSS JOIN (
				SELECT DISTINCT iso_code
				FROM `mmfg-dwh-gruppo-prod.DM_SELLOUT.F_TASSO_QUOTIDIANO`
			) AS codici_esistenti
			LEFT JOIN `mmfg-dwh-gruppo-prod.DM_SELLOUT.F_TASSO_QUOTIDIANO` ta ON (
				te.data = ta.reference_date and codici_esistenti.iso_code = ta.iso_code
			)
			GROUP BY 1, 2, 3
	) tassi
), 
S_PREZZO_EXT AS (
	SELECT 
		IF(societa IS NOT NULL AND societa !='', societa, NULL) AS societa,
		IF(anno IS NOT NULL AND anno > 0, anno, NULL) AS anno,
		IF(stagione IS NOT NULL AND stagione != 0, stagione, NULL) AS stagione,
		IF(modello IS NOT NULL AND modello !='', modello, NULL) AS modello,
		IF(modello_retail IS NOT NULL AND modello_retail !='', modello_retail, NULL) AS modello_retail,
		input_filename,
		negozio,
		tipo_negozio_retail,
		nazione_negozio,
		prezzo,
		tipo_prezzo,
		divisa,
		controvalore,
		divisa_controvalore,
		record_type,
		data_creazione,
		DATE_TRUNC(data_creazione, MONTH) AS mese_creazione,
		ts_inserimento,
		ts_creazione,
		ts_modifica
	FROM (
		SELECT
			pr.* EXCEPT(tipo_negozio_retail),
			tipo_negozio_retail
		FROM `mmfg-dwh-gruppo-prod.DM_SELLOUT_STAGING.S_PREZZO_EXT` pr
		WHERE input_filename != 'catalogo_prezzi'
		UNION ALL
		SELECT
			pr.* EXCEPT(tipo_negozio_retail),
			-- FGEDW-945: i prezzi da BMS vengono moltiplicati per nazione-catena
			neg.tipo_negozio_retail
		FROM `mmfg-dwh-gruppo-prod.DM_SELLOUT_STAGING.S_PREZZO_EXT` pr
		LEFT JOIN (
			SELECT DISTINCT nazione_negozio, tipo_negozio_retail
			FROM BACKUP_NEGOZI
		) neg USING (nazione_negozio)
		WHERE input_filename = 'catalogo_prezzi'
	)
), 
PORTE AS (
	SELECT DISTINCT cli.societa,
			cli.anno,
			cli.stagione,
			p.nazione,
			p.porta AS negozio,
			p.tipo_negozio_retail,
			cli.cliente AS cliente,
			CAST(CONCAT(cli.anno,cli.stagione) AS INT64) AS annostagione
	FROM `mmfg-dwh-gruppo-prod.DM_PREZZO_LISTINO.D_CLIENTE_STAGIONE` AS cli
	LEFT JOIN `mmfg-dwh-gruppo-prod.DM_SELLOUT.D_PORTA` AS num_porta ON (
		CAST(cli.punto_vendita_retail AS INT64) = num_porta.numero_porta AND num_porta.numero_porta != 0
	)
	JOIN `mmfg-dwh-gruppo-prod.DM_SELLOUT.D_PORTA` AS p ON (
		COALESCE(num_porta.porta, cli.punto_vendita_retail) = p.porta
	)
	WHERE cli.cliente IS NOT NULL
), 
CLIENTI_LISTINI AS (
	SELECT societa,
		anno,
		stagione,
		cliente,
		listino,
		divisa,
	FROM (
		SELECT DISTINCT societa,
				anno,
				stagione,
				cliente,
				listino_acquisto AS listino,
		FROM `mmfg-dwh-gruppo-prod.DM_PREZZO_LISTINO.D_CLIENTELA`
		WHERE listino_acquisto IS NOT NULL
		AND listino_vendita IS NULL
		AND validita IN ('V', '') 
		AND annostagione >= 20131
	) clientele
	JOIN `mmfg-dwh-gruppo-prod.DM_SELLOUT_STAGING.D_LISTINO` listini USING (societa, anno, stagione, listino)
),
PREZZI_ACQUISTO_DBG AS (
	SELECT DISTINCT *
	FROM CLIENTI_LISTINI
	JOIN PORTE USING (societa,anno,stagione,cliente)
	JOIN (
		SELECT DISTINCT
			societa,
			anno,
			stagione,
			modello,
			listino,
			prezzo AS prezzo_acquisto,
			controvalore AS controvalore_prezzo_acquisto,
			divisa,
		FROM `mmfg-dwh-gruppo-prod.DM_PREZZO_LISTINO.D_PREZZO`
		WHERE tipo_prezzo = 'A'
		AND CAST(CONCAT(anno,stagione) AS INT64) IN (SELECT * FROM ${ref("d_prezzo_ext_input_output_partitions")})
	) prezzi USING (societa, anno, stagione, listino, divisa)
),
RICARICHI AS (
	SELECT * EXCEPT(RK)
	FROM (
		SELECT *, RANK() OVER (PARTITION BY tipo_negozio_retail, nazione, negozio, anno, stagione ORDER BY ts_creazione DESC) AS RK
		FROM (
			SELECT
				DISTINCT tipo_negozio AS tipo_negozio_retail,
				nazione,
				negozio,
				SAFE_CAST(SUBSTR(annostag, 1, 4) AS INT64) AS anno,
				SAFE_CAST(SUBSTR(annostag, -1, 1) AS INT64) AS stagione,
				CAST(ricarico AS FLOAT64) AS ricarico,
				PARSE_DATE("%Y%m%d", data_creazione) AS data_creazione,
				CAST(modificato AS TIMESTAMP) AS ts_creazione,
				CURRENT_TIMESTAMP AS ts_modifica,
				CURRENT_TIMESTAMP AS ts_inserimento,
				valuta_acquisto AS divisa, # divisa del listino di partenza per calcolare il prezzo ed il controvalore
				IF(divisa IS NULL OR divisa = '', 'EUR', divisa) AS divisa_prezzo_markup, # Se non presente delfault EUR - questa e' la divisa del prezzo
				IF(
					CAST(cambio AS FLOAT64) = 0 OR cambio IS NULL,
					1,
					CAST(cambio AS FLOAT64)
				) AS cambio, # Se non presente default 1
				IF(
					CAST(cambio_acquisto AS FLOAT64) = 0 OR cambio_acquisto IS NULL,
					1,
					CAST(cambio_acquisto AS FLOAT64)
				) AS cambio_acquisto, # Se non presente default 1
				CAST(annostag AS INT64) AS annostagione
			FROM `mmfg-dwh-gruppo-prod.DM_PREZZO_LISTINO.D_RICARICHI`
			WHERE annostag >= '20131'
			AND valuta_acquisto IS NOT NULL
			AND NOT (valuta_acquisto = 'USD' AND cambio_acquisto = '1')
			AND data_creazione IS NOT NULL 
			AND data_creazione != ''
		)
	)
	WHERE RK = 1
),
PREZZI_RICARICHI AS (
	SELECT DISTINCT
		CAST(ric.ricarico AS FLOAT64) AS ricarico,
		CAST(ric.cambio AS FLOAT64) AS cambio,
		CAST(ric.cambio_acquisto AS FLOAT64) AS cambio_acquisto,
		ric.negozio,
		pr.modello,
		ric.anno,
		ric.stagione,
		ric.tipo_negozio_retail,
		ric.nazione,
		annostagione,
		pr.prezzo_acquisto,
		pr.controvalore_prezzo_acquisto
	FROM RICARICHI ric
	JOIN PREZZI_ACQUISTO_DBG pr USING(negozio, annostagione)
),
D_PREZZO_EXT AS (
	SELECT * EXCEPT(RK),
		MIN(data_creazione) OVER (
			PARTITION BY negozio, tipo_negozio_retail, nazione_negozio, anno, stagione, modello_retail, tipo_prezzo, CAST(prezzo AS STRING)
		) AS data_creazione_prezzo
	FROM (
		SELECT
			*,
			ROW_NUMBER() OVER (
				PARTITION BY negozio, tipo_negozio_retail, nazione_negozio, anno, stagione, modello, tipo_prezzo
				ORDER BY
					record_type = 'SALE' DESC, -- i SALE vengono presi per primi se sono presenti anche record Markup (MK) (FGEDW-878)
					data_creazione DESC,
					ts_modifica DESC,
					prezzo > 0 -- FGEDW-878: se su S_PREZZO_EXT il prezzo e 0, il record non e valido
			) AS RK
		FROM (
			SELECT 
				S.* EXCEPT(anno,stagione, modello, tipo_negozio_retail),
				COALESCE(S.anno, f_modello.anno, f_modello_retail.anno) AS anno,
				COALESCE(S.stagione, f_modello.stagione, f_modello_retail.stagione) AS stagione,
				COALESCE(S.modello, f_modello.modello, f_modello_retail.modello) AS modello,
				COALESCE(S.tipo_negozio_retail, BACKUP_NEGOZI.tipo_negozio_retail) AS tipo_negozio_retail,
			FROM S_PREZZO_EXT S
			LEFT JOIN BACKUP_NEGOZI USING (negozio)
			LEFT JOIN BACKUP_PRODOTTI AS f_modello USING(societa, modello)
			LEFT JOIN BACKUP_PRODOTTI AS f_modello_retail ON (S.societa=f_modello_retail.societa AND S.modello_retail = f_modello_retail.modello_retail)
			WHERE (S.record_type, S.nazione_negozio) != ('BMS', 'JP') # questi vengono elaborati dalla query PREZZI_NEGOZI_GIAPPONE
		) TEMP_D_PREZZO_EXT
	)
	WHERE RK = 1
),
PREZZI_NEGOZI_GIAPPONE AS (
	SELECT DISTINCT 
		S.input_filename,
		P.negozio,
		P.tipo_negozio_retail,
		P.nazione AS nazione_negozio,
		S.societa,
		S.stagione,
		S.anno,
		S.modello,
		S.prezzo,
		S.tipo_prezzo,
		S.divisa,
		# -- CAMBIO = P.prezzo_acquisto/P.controvalore_prezzo_acquisto --
		# SAFE_DIVIDE(P.prezzo_acquisto, P.controvalore_prezzo_acquisto) AS cambio,
		# -- CONTROVALORE = S.prezzo/CAMBIO (prezzo di vendita / cambio) --
		ROUND(SAFE_DIVIDE(S.prezzo, SAFE_DIVIDE(P.prezzo_acquisto, P.controvalore_prezzo_acquisto)), 0) AS controvalore,
		'EUR' AS divisa_controvalore,
		S.data_creazione,
		S.ts_inserimento,
		S.ts_creazione,
		S.ts_modifica,
		annostagione
	FROM (
		SELECT S.* EXCEPT(modello_retail, modello),
			COALESCE(S.modello, f_modello_retail.modello) AS modello,
		FROM S_PREZZO_EXT S
		LEFT JOIN BACKUP_PRODOTTI AS f_modello_retail USING (societa,anno,stagione,modello_retail)
	) S
	JOIN PREZZI_ACQUISTO_DBG P USING (societa,anno,stagione,modello, divisa)
	WHERE (record_type, nazione_negozio) = ('BMS', 'JP')
	AND nazione = 'JP'
	AND	CASE 
			WHEN S.societa = 'MN' AND P.tipo_negozio_retail LIKE 'MC%' THEN True
			WHEN S.societa = 'MM' THEN True
			ELSE NULL 
		END
	QUALIFY ROW_NUMBER() OVER(PARTITION BY societa, anno, stagione, P.negozio, P.tipo_negozio_retail, P.nazione, modello, divisa, tipo_prezzo ORDER BY data_creazione DESC) = 1
),
CAMBI_STAGIONE AS (
	SELECT DISTINCT
		anno,
		stagione,
		divisa,
		tipo_negozio AS tipo_negozio_retail,
		previsione
	FROM `mmfg-dwh-gruppo-prod.DM_PREZZO_LISTINO.D_CAMBIO_STAGIONE`
	WHERE previsione != 0
)
SELECT *
FROM (
	SELECT
		input_filename,
		negozio,
		tipo_negozio_retail,
		nazione_negozio,
		societa,
		stagione,
		anno,
		modello,
		prezzo,
		tipo_prezzo,
		divisa,
		controvalore,
		divisa_controvalore,
		data_creazione,
		ts_inserimento,
		ts_creazione,
		ts_modifica,
		annostagione
	FROM PREZZI_NEGOZI_GIAPPONE
	
	UNION ALL
	
	SELECT 
		input_filename,
		negozio,
		tipo_negozio_retail,
		nazione_negozio,
		societa,
		stagione,
		anno,
		modello,
		prezzo,
		tipo_prezzo,
		divisa,
		controvalore,
		divisa_controvalore,
		data_creazione,
		ts_inserimento,
		ts_creazione,
		ts_modifica,
		annostagione
	FROM (
		SELECT
			*,
			CAST(CONCAT(anno,stagione) AS INT64) AS annostagione
		FROM
			(
			SELECT DISTINCT
				D.societa,
				D.anno,
				D.stagione,
				D.modello,
				input_filename,
				negozio,
				D.tipo_negozio_retail,
				nazione_negozio,
				prezzo,
				tipo_prezzo,
				divisa,
				CASE
					WHEN D.divisa = 'EUR' AND divisa_controvalore IS NULL AND (D.controvalore = 0 OR D.controvalore IS NULL) THEN ROUND(D.prezzo)
					WHEN D.record_type = 'SALE' THEN COALESCE(
						IF(
							p_ric.cambio = 1 AND p_ric.controvalore_prezzo_acquisto IS NOT NULL,
							ROUND((p_ric.controvalore_prezzo_acquisto * p_ric.ricarico), 0),
							ROUND(D.prezzo / p_ric.cambio, 0)
						),
						ROUND(D.prezzo / c_st.previsione),
						ROUND(COALESCE(SAFE_DIVIDE(D.prezzo, f_tassi_quotidiani.avg_rate), 0))
					)
					WHEN D.record_type = 'BMS' AND (D.controvalore = 0 OR D.controvalore IS NULL) THEN COALESCE(
						ROUND(D.prezzo / c_st.previsione), -- usato il cambio di fr_cambi_stagione
						ROUND(COALESCE(SAFE_DIVIDE(D.prezzo, f_tassi_quotidiani.avg_rate), 0)) -- altrimenti tasso quotidiano
					)
					ELSE ROUND(D.controvalore) -- Record con tipo_record = 'MK' per il quale il controvalore viene gia calcolato a partire dalla D_RICARICHI
				END AS controvalore,
				CASE
					WHEN D.divisa = 'EUR' AND divisa_controvalore IS NULL AND (D.controvalore = 0 OR D.controvalore IS NULL) THEN D.divisa # EUR
					WHEN D.record_type IN ('SALE', 'BMS') THEN 'EUR'
					ELSE divisa_controvalore
				END AS divisa_controvalore,
				data_creazione,
				ts_inserimento,
				ts_creazione,
				ts_modifica
			FROM D_PREZZO_EXT D
			LEFT JOIN CAMBI_STAGIONE c_st USING(anno, stagione, divisa, tipo_negozio_retail)
			LEFT JOIN PREZZI_RICARICHI p_ric USING(negozio, modello, anno, stagione)
			LEFT JOIN TASSI_CAMBIO_QUOTIDIANI AS f_tassi_quotidiani ON (D.divisa = f_tassi_quotidiani.iso_code AND D.data_creazione_prezzo = f_tassi_quotidiani.reference_date AND D.record_type IN ('SALE', 'BMS'))
		)
		WHERE CAST(CONCAT(anno,stagione) AS INT64) IN (SELECT * FROM ${ref("d_prezzo_ext_input_output_partitions")})
	)
)
WHERE TRUE
QUALIFY ROW_NUMBER() OVER (
	PARTITION BY negozio, tipo_negozio_retail, nazione_negozio, anno, stagione, modello, tipo_prezzo 
	ORDER BY input_filename = 'catalogo_prezzi' DESC, data_creazione DESC, ts_modifica DESC
	) = 1 # RANK per filtrare i prezzi duplicati nella union tra D_PREZZO_EXT e PREZZI_NEGOZI_GIAPPONE, i prezzi da BMS hanno la precedenza
		