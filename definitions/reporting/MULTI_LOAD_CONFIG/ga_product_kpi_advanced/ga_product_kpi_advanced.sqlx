config {
    type: "table",
    schema: "DM_DIGITAL",
    name: "F_GA_PRODUCT_KPI_ADVANCED_20230101"
}

WITH regions AS (
	SELECT
		CONCAT(brand, "-", country) AS key,
		societa_v1, societa_v2, brand, region, country, warehouse_code, currency_trx, currency_fnc, date_begin, date_end,
		webanalytics_brand, webanalytics_country
	FROM ${ref("D_REGION")}
),
prodotto AS (
	/*
	returns relevant information from D_PRODOTTO;
	*/
	SELECT DISTINCT
		societa,
		brand,
		nome, 
		modello_barcode_negozio,
		IF(variante IS NOT NULL AND LENGTH(variante) <=3, LPAD(variante, 3, '0'), variante)                                   AS variante, # [BIHD-1696, BIHD-1831]
		CONCAT(modello_barcode_negozio, IF(variante IS NOT NULL AND LENGTH(variante) <=3, LPAD(variante, 3, '0'), variante))  AS modello_variante
	FROM ${ref("D_PRODOTTO")}
	WHERE -- intervallo tra la PE di 3 anni fa e quella dell'anno prossimo
		annostagione BETWEEN (EXTRACT(YEAR FROM DATE_ADD(CURRENT_DATE(), INTERVAL -3 YEAR)) * 10 + 1) AND (EXTRACT(YEAR FROM CURRENT_DATE())+1) * 10 + 1
),
prodotto_b2c AS (
	/*
	returns relevant information from D_PRODOTTO_B2C;
	*/
	SELECT 
		REGEXP_REPLACE(pb2c.modello_barcode_negozio, r'(^[A-Z]{2})', '')    AS modello_barcode_negozio,
		pb2c.brand                                                          AS b2c_brand, 
		pb2c.region                                                         AS b2c_region, 
		pb2c.annostagione                                                   AS b2c_annostagione, 
		pb2c.b2c_category,
		pb2c.b2c_subcategory,
		pb2c.b2c_collection
	FROM ${ref("D_PRODOTTO_B2C")} pb2c
	WHERE TRUE
	QUALIFY ROW_NUMBER() OVER (PARTITION BY REGEXP_REPLACE(pb2c.modello_barcode_negozio, r'(^[A-Z]{2})', ''), brand, region ORDER BY annostagione DESC) = 1
),
prodotto_merge AS (
	/*
	returns relevant information from both D_PRODOTTO and D_PRODOTTO_B2C; 
	*/
	SELECT
		p.*,
		pb2c.* EXCEPT(modello_barcode_negozio)
	FROM prodotto p
	LEFT JOIN prodotto_b2c pb2c 
	ON (p.modello_barcode_negozio = pb2c.modello_barcode_negozio)
),
raw_MM AS (
	/*
	returns web analytics event data with zero-to-little processing;
	*/
	SELECT 
		'MAX MARA'                                                                                                      AS webanalytics_brand,
		'MM'                                                                                                            AS _brand, -- eliminato dopo
		device.category                                                                                                 AS device,
		user_pseudo_id, 
		IF(event_name = 'image_change' AND ep.key = 'event_location', CAST(ep.value.int_value AS STRING), it.item_id)   AS item_id, 
		IF(event_name = 'purchase', it.quantity,      0)                                                                AS item_quantity,
		IF(event_name = 'purchase', it.item_revenue,  0)                                                                AS item_revenue,
		PARSE_DATE('%Y%m%d', event_date)                                                                                AS event_date,
		event_timestamp,
		event_name, 
		it.item_list_name                                                                                               AS item_list_name,
		IF(
			it.item_list_index = '(not set)',
			NULL,
			CASE 
				WHEN CAST(it.item_list_index AS INT64) BETWEEN  1 AND  5  THEN "1-5"
				WHEN CAST(it.item_list_index AS INT64) BETWEEN  6 AND 14  THEN "6-14"
				WHEN CAST(it.item_list_index AS INT64) BETWEEN 15 AND 30  THEN "15-30"
				WHEN CAST(it.item_list_index AS INT64) > 30               THEN "30+"
				ELSE NULL 
			END    
		)                                                                                                               AS item_list_position_bin,
		ep.key                                                                                                          AS ep_key,
		IF(
			ep.key = 'product_range_availability', 
			CASE
				WHEN ep.value.string_value = '1-10'   THEN '1-20'
				WHEN ep.value.string_value = '11-20'  THEN '1-20'
				WHEN ep.value.string_value = '21-30'  THEN '21-40'
				WHEN ep.value.string_value = '31-40'  THEN '21-40'
				WHEN ep.value.string_value = '41-50'  THEN '41-60'
				WHEN ep.value.string_value = '51-60'  THEN '41-60'
				WHEN ep.value.string_value = '61-70'  THEN '61-80'
				WHEN ep.value.string_value = '71-80'  THEN '61-80'
				WHEN ep.value.string_value = '81-90'  THEN '81-99'
				WHEN ep.value.string_value = '91-99'  THEN '81-99'
				ELSE ep.value.string_value
			END,
			ep.value.string_value
		)                                                                                                               AS ep_value_string,
		ep.value.int_value                                                                                              AS ep_value_int,
	FROM ${ref("events_*")},
	UNNEST(event_params)    AS ep 
	LEFT JOIN UNNEST(items)   AS it
	WHERE PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) IN (SELECT * FROM ${ref("ga_product_kpi_advanced_input_output_partitions")})
	AND user_pseudo_id IS NOT NULL
	AND IF(event_name = 'image_change', IF(ep.key = 'event_location', CAST(ep.value.int_value AS STRING) IS NOT NULL,     TRUE), it.item_id IS NOT NULL   )
	AND IF(event_name = 'image_change', IF(ep.key = 'event_location', CAST(ep.value.int_value AS STRING) <> '(not set)',  TRUE), it.item_id <> '(not set)')
	AND ep.key IN ('store_country', 'product_range_availability', 'event_detail', 'event_location')
),
raw AS (
	/*
	operates as an aggregator of web analytics event data for different brands (if more than one);
	*/
	SELECT * FROM raw_MM
),
intermediate AS (
	/*
	returns webanalytics event data in a their processed form;
	the duplication of records caused by UNNEST is taken care of and the original cardinality restored;
	*/
	SELECT 
		* EXCEPT(item_id, ep_key, ep_value_string, ep_value_int),
		ANY_VALUE(COALESCE(item_id))                                                            AS item_id,
		ANY_VALUE(COALESCE(IF(ep_key = 'store_country',               ep_value_string, NULL)))  AS webanalytics_country,
		ANY_VALUE(COALESCE(IF(ep_key = 'product_range_availability',  ep_value_string, NULL)))  AS size_availability,
		ANY_VALUE(COALESCE(IF(ep_key = 'event_detail',                ep_value_string, NULL)))  AS event_detail,
	FROM raw
	GROUP BY
		webanalytics_brand, _brand, device, user_pseudo_id, item_quantity, item_revenue, event_date, event_timestamp, event_name, item_list_name, item_list_position_bin
	HAVING item_id IS NOT NULL
	AND webanalytics_country IS NOT NULL
	AND webanalytics_country NOT IN ('ww', 'www')
),
event_of_interest AS (
	/*
	returns all events which were determined (a priori) to be the destination of the attribution function;
	in other words, to each <event_of_interest> we are going to assign some other event in its past;
	*/
	SELECT 
		webanalytics_brand,
		_brand,
		webanalytics_country,
		device,
		user_pseudo_id,
		item_id,
		item_quantity,
		item_revenue,
		size_availability,
		IF(event_name = 'select_item' AND CONTAINS_SUBSTR(event_detail, 'zoom_open'), 'zoom', event_name) AS event_name,
		event_date,
		event_timestamp
	FROM intermediate
	WHERE
		event_name IN (
			'view_item_list', 
			'view_item',
			'select_item',
			'image_change',
			'add_to_cart',
			'purchase',
			'image_change'
		)
),
event_reference AS (
	/*
	returns all events which were determined (a priori) eligible to be the source of the attribution function;
	in other words, the set of all <event_reference> contains the "past" of the set of all <event_of_interest>;
	*/
	SELECT
		user_pseudo_id,
		item_id,
		event_name,
		CASE
			WHEN event_name = 'select_item'     THEN 1 
			WHEN event_name = 'view_item_list'  THEN 2
			ELSE 3
		END AS event_name_priority,
		event_date,
		event_timestamp,
		item_list_name,
		item_list_position_bin
	FROM intermediate
	WHERE
		event_name IN (
			'view_item_list', 
			'select_item'
		)
	AND item_list_name NOT IN (
		"fitanalytics",
		"(not set)",
		"na:t-sales",
		"checkout-page-eshop",
		"checkout-page",
		"",
		"product-page"
	)
),
match AS (
	/*
	given the set of all <event_of_interest> and the set of all <event_reference>,
	we are going to determine the specific subset of <event_reference> for each <event_of_interest>;
	in other words, we are about to determine the "past" of each <event_of_interest>; 
	
	note that a specific <event_of_interest> can be matched with: 
	- nothing               (if its history is empty,                                   according to the allowed event_name(s) of <event_reference>);
	- itself                (if its history only contains itself,                       according to the allowed event_name(s) of <event_reference>);
	- an <event_reference>  (if its history also contains events different from itself, according to the allowed event_name(s) of <event_reference>);
	*/
	SELECT 
		ei.webanalytics_brand,
		ei._brand,
		ei.webanalytics_country,
		ei.device,
		ei.user_pseudo_id, 
		ei.item_id,
		ei.size_availability                      AS size_availability,
		ei.item_quantity,
		ei.item_revenue,
		ei.event_date,
		ei.event_timestamp                        AS ei_timestamp,
		ei.event_name                             AS ei_event_name,
		er.event_name                             AS er_event_name,
		er.event_name_priority                    AS er_event_name_priority,
		er.item_list_name,
		er.item_list_position_bin,
		er.event_timestamp                        AS er_timestamp,
		ei.event_timestamp = er.event_timestamp   AS self
	FROM event_of_interest ei
	LEFT JOIN event_reference er
	ON (
		ei.user_pseudo_id = er.user_pseudo_id 
		AND ei.item_id = er.item_id  
		AND ei.event_date = er.event_date
		AND ei.event_timestamp >= er.event_timestamp
	)
),
attribution AS (
	/*
	given each <event_of_interest> and the "history" of <event_reference> leading to it,
	we now determine which of this past events the former should be attributed to; 
	
	note that a specific <event_of_interest> can be attributed to 
	- nothing               (if its history is empty,                                   according to the allowed event_name(s) of <event_reference>);
	- itself                (if its history only contains itself,                       according to the allowed event_name(s) of <event_reference>);
	- an <event_reference>  (if its history also contains events different from itself, according to the allowed event_name(s) of <event_reference>);
	*/
	SELECT DISTINCT
		webanalytics_brand,
		_brand,
		webanalytics_country,
		device,
		user_pseudo_id,
		item_id,
		size_availability,
		item_quantity,
		item_revenue,
		event_date,
		ei_timestamp,
		ei_event_name,
		ARRAY_AGG(item_list_name)         OVER (w)[OFFSET(0)] AS item_list_name,
		ARRAY_AGG(item_list_position_bin) OVER (w)[OFFSET(0)] AS item_list_position_bin
	FROM match m
	WINDOW w AS (
		PARTITION BY user_pseudo_id, item_id, ei_timestamp
		ORDER BY 
			self                    ASC, # uncomment to express preference over same/different event (or comment to inhibit preference)
			er_event_name_priority  ASC, # uncomment to express preference over event_names(s)       (or comment to inhibit preference)
			er_timestamp           DESC
	)
	ORDER BY webanalytics_brand, webanalytics_country, device, user_pseudo_id, item_id, size_availability, item_quantity
),
results_basic AS (
	/*
	now that each <event_of_interest> has been subject to attribution,
	we shift the focus on item(s) and item_list_name(s) and aggregate <event_of_interest> depending on their type;
	*/
	SELECT
		webanalytics_brand,
		_brand,
		webanalytics_country,
		device,        
		event_date,
		item_id,
		item_list_name,
		ANY_VALUE(COALESCE(item_list_position_bin))         AS item_list_position_bin,
		ANY_VALUE(COALESCE(size_availability))              AS size_availability,
		SUM(item_quantity)                                  AS item_quantity,
		SUM(CAST(item_revenue AS INT64))                    AS item_revenue_trx,
		SUM(IF(ei_event_name = "view_item_list",  1,0))     AS view_item_list,
		SUM(IF(ei_event_name = "select_item",     1,0))     AS select_item,
		SUM(IF(ei_event_name = "view_item",       1,0))     AS view_item,
		SUM(IF(ei_event_name = "zoom",            1,0))     AS zoom,
		SUM(IF(ei_event_name = "add_to_cart",     1,0))     AS add_to_cart,
		SUM(IF(ei_event_name = "purchase",        1,0))     AS purchase,
		SUM(IF(ei_event_name = "image_change",    1,0))     AS image_change
	FROM attribution r
	GROUP BY 1,2,3,4,5,6,7
	ORDER BY 1,2,3,4,5,6,7
),
results_integrated AS (
	/*
	the records in <results_basic> are correct but still lack in usability;
	here we provide the association with <regions> and <prodotto_merge>;  
	*/
	SELECT
		r.brand,
		r.region,
		r.country,
		r.currency_trx,
		r.currency_fnc,
		
		rb.device,
		rb.item_id,
		rb.size_availability,
		rb.item_quantity,
		rb.item_revenue_trx,
		
		pm.nome,
		pm.b2c_annostagione,
		pm.b2c_category,
		pm.b2c_subcategory,
		pm.b2c_collection,
		
		rb.event_date,
		rb.item_list_name,
		rb.item_list_position_bin,
		
		view_item_list,
		view_item,
		select_item,
		zoom,
		add_to_cart,
		purchase,
		image_change
	FROM results_basic rb
	JOIN regions r 
	ON ( 
		rb._brand = r.webanalytics_brand
		AND rb.webanalytics_country = r.webanalytics_country
		AND CASE 
			WHEN r.date_end IS NOT NULL THEN (rb.event_date BETWEEN r.date_begin AND r.date_end)
			WHEN r.date_end IS NULL     THEN (rb.event_date >= r.date_begin)
		END
	)
	LEFT JOIN prodotto_merge pm ON (REGEXP_REPLACE(item_id, r'(^[A-Z]{2})', '') = pm.modello_variante)
	QUALIFY ROW_NUMBER() OVER (
		PARTITION BY r.brand, r.region, r.country, rb.device, rb.item_id, rb.size_availability, rb.item_quantity, rb.item_revenue_trx, rb.event_date, rb.item_list_name, rb.item_list_position_bin
		ORDER BY (r.societa_v1 = pm.societa) DESC, (r.brand = pm.b2c_brand) DESC, (r.region = pm.b2c_region) DESC # BIHD-1738
	) = 1
)

SELECT *
FROM results_integrated
		